---
import { ALL_MONS } from "../data/mons";
import Layout from "../layouts/Layout.astro";

import { connect } from "@planetscale/database";

const createdAt = new Date();
console.log("generating results page", createdAt);

const RESULTS_QUERY =
  "select `roundest-mon`.Pokemon.id, aggr_selection_0_Vote._voteFor, aggr_selection_1_Vote._voteAgainst from `roundest-mon`.Pokemon left join (select `roundest-mon`.Vote.votedForId, count(*) as orderby_aggregator from `roundest-mon`.Vote group by `roundest-mon`.Vote.votedForId) as orderby_0_Vote on `roundest-mon`.Pokemon.id = orderby_0_Vote.votedForId left join (select `roundest-mon`.Vote.votedForId, count(*) as _voteFor from `roundest-mon`.Vote group by `roundest-mon`.Vote.votedForId) as aggr_selection_0_Vote on `roundest-mon`.Pokemon.id = aggr_selection_0_Vote.votedForId left join (select `roundest-mon`.Vote.votedAgainstId, count(*) as _voteAgainst from `roundest-mon`.Vote group by `roundest-mon`.Vote.votedAgainstId) as aggr_selection_1_Vote on `roundest-mon`.Pokemon.id = aggr_selection_1_Vote.votedAgainstId where 1 = 1 order by COALESCE(orderby_0_Vote.orderby_aggregator, ?) desc";

const conn = connect({
  host: import.meta.env.DATABASE_HOST,
  username: import.meta.env.DATABASE_USERNAME,
  password: import.meta.env.DATABASE_PASSWORD,
});

const data = await conn.execute(RESULTS_QUERY, ["0", "1"]);

const rows = data.rows as {
  id: number;
  _voteFor: string;
  _voteAgainst: string;
}[];

const generateCountPercent = (pokemon: {
  _voteFor: string;
  _voteAgainst: string;
}) => {
  const VoteFor = +pokemon._voteFor;
  const VoteAgainst = +pokemon._voteAgainst;
  if (VoteFor + VoteAgainst === 0) {
    return 0;
  }
  return (VoteFor / (VoteFor + VoteAgainst)) * 100;
};

const sorted = rows.sort((a, b) => {
  const difference = generateCountPercent(b) - generateCountPercent(a);

  if (difference === 0) {
    return +b._voteFor - +a._voteFor;
  }

  return difference;
});

const getImageForMon = (mon: number) => `/api/image/${mon}.png`;

// Cache this page
const FIVE_MIN_IN_SECONDS = 5 * 60;
Astro.response.headers.set(
  "Cache-Control",
  `s-maxage=${FIVE_MIN_IN_SECONDS}, stale-while-revalidate`
);
---

<Layout title="Round But Faster" headerTitle="Results">
  <div
    class="h-screen w-screen flex flex-col justify-between items-center relative"
  >
    <h3>As Of {createdAt.toLocaleString()}</h3>
    <div class="flex flex-col w-full max-w-2xl border">
      {
        sorted.map((row, index) => {
          return (
            <div class="relative flex border-b p-2 items-center justify-between">
              <div class="flex items-center">
                <div class="flex items-center pl-4">
                  <img
                    src={getImageForMon(row.id)}
                    width={64}
                    height={64}
                    alt={`Sprite for ${ALL_MONS[row.id - 1]}`}
                    style="image-rendering: pixelated;"
                  />
                  <div class="pl-2 capitalize">{ALL_MONS[row.id - 1]}</div>
                </div>
              </div>
              <div class="pr-4">
                {generateCountPercent(row).toFixed(2) + "%"}
              </div>
              <div class="absolute top-0 left-0 z-20 flex items-center justify-center px-2 font-semibold text-white bg-gray-600 border border-gray-500 shadow-lg rounded-br-md">
                {index + 1}
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</Layout>
